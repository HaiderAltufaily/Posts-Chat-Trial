{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createUserWithEmailAndPassword, GoogleAuthProvider, sendEmailVerification, sendPasswordResetEmail, setPersistence, signInWithEmailAndPassword, signInWithPopup, updateProfile } from \"@firebase/auth\";\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { auth, db } from \"../firebase/firebase\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nexport const handleSignUp = createAsyncThunk(\"handleSignUp/auth\", async user => {\n  const response = await createUserWithEmailAndPassword(auth, user.email, user.password);\n  await updateProfile(auth.currentUser, {\n    displayName: user.username\n  });\n  await setDoc(doc(db, \"users\", response.user.uid), {\n    username: auth.currentUser.displayName,\n    createdAt: new Date(),\n    email: user.email\n  });\n  return user.username;\n});\nexport const handleSignIn = createAsyncThunk(\"handleSignIn/auth\", async ({\n  user,\n  checked\n}) => {\n  //   const persistance = await setPersistence(auth,checked? localStorage:sessionStorage)\n  const response = await signInWithEmailAndPassword(auth, user.email, user.password); // const sentV = await sendEmailVerification(response.user);\n});\nexport const handleForgetPass = createAsyncThunk(\"handleForgetPass/auth\", async email => {\n  await sendPasswordResetEmail(auth, email);\n});\nexport const getCurrent = createAsyncThunk(\"getCurrent/auth\", async () => {\n  const user = (await getDoc(doc(db, \"users\", auth.currentUser.uid))).data();\n  console.log(\"this is someone\", user);\n  return user; // const sentV = await sendEmailVerification(response.user);\n});\nexport const googleSignin = createAsyncThunk(\"googleSignin/auth\", async user => {\n  const googleProvider = new GoogleAuthProvider(); // const presist = await setPersistence(auth, localStorage);\n\n  const response = await signInWithPopup(auth, googleProvider);\n  const docSnap = (await getDoc(doc(db, \"users\", response.user.uid))).data();\n\n  if (!docSnap) {\n    await setDoc(doc(db, \"users\", response.user.uid), {\n      username: response.user.displayName,\n      createdAt: new Date(),\n      email: response.user.email,\n      likes: []\n    });\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isLoggedIn: false,\n    response: \"\",\n    currentUser: \"\",\n    google: {\n      status: \"\"\n    },\n    forgotPass: {\n      status: \"\"\n    },\n    error: \"\"\n  },\n  reducers: {\n    loginHandler(state, action) {\n      state.isLoggedIn = action.payload;\n    },\n\n    setCurrentUser(state, action) {\n      state.currentUser = action.payload;\n      state.isLoggedIn = !!action.payload;\n    }\n\n  },\n  extraReducers: {\n    [HYDRATE]: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), action.payload.auth);\n    },\n    [handleSignUp.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignUp.fulfilled]: (state, action) => {\n      state.response = \"success\";\n    },\n    [handleSignUp.rejected]: (state, action) => {\n      state.response = action.error.message;\n    },\n    [handleSignIn.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignIn.fulfilled]: (state, action) => {\n      state.response = \"success\";\n      state.error = \"\";\n    },\n    [handleSignIn.rejected]: (state, action) => {\n      let error;\n\n      if (action.error.message === \"Firebase: Error (auth/user-not-found).\") {\n        error = \"There is no such a user, make sure to use the correct email.\";\n      } else if (action.error.message === \"Firebase: Access to this account has been temporarily disabled due to many failed login attempts. You can immediately restore it by resetting your password or you can try again later. (auth/too-many-requests).\") {\n        error = \"Too many attempts, try again later.\";\n      } else if (action.error.message === \"Firebase: Error (auth/wrong-password).\") {\n        error = \"Wrong password, try again.\";\n      }\n\n      state.response = \"error\";\n      state.error = error;\n    },\n    [googleSignin.pending]: (state, action) => {\n      state.google.status = \"loading\";\n    },\n    [googleSignin.fulfilled]: (state, action) => {\n      state.google.status = \"success\";\n    },\n    [googleSignin.rejected]: (state, action) => {\n      state.google.status = action.error.message;\n    },\n    [handleForgetPass.pending]: (state, action) => {\n      state.forgotPass.status = \"loading\";\n    },\n    [handleForgetPass.fulfilled]: (state, action) => {\n      state.forgotPass.status = \"success\";\n    },\n    [handleForgetPass.rejected]: (state, action) => {\n      state.forgotPass.status = action.error.message;\n    },\n    [getCurrent.fulfilled]: (state, action) => {\n      state.currentUser = action.payload;\n    }\n  }\n});\nexport const {\n  loginHandler,\n  setCurrentUser\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/authSlice.js"],"names":["createUserWithEmailAndPassword","GoogleAuthProvider","sendEmailVerification","sendPasswordResetEmail","setPersistence","signInWithEmailAndPassword","signInWithPopup","updateProfile","addDoc","doc","getDoc","setDoc","createAsyncThunk","createSlice","axios","auth","db","HYDRATE","handleSignUp","user","response","email","password","currentUser","displayName","username","uid","createdAt","Date","handleSignIn","checked","handleForgetPass","getCurrent","data","console","log","googleSignin","googleProvider","docSnap","likes","authSlice","name","initialState","isLoggedIn","google","status","forgotPass","error","reducers","loginHandler","state","action","payload","setCurrentUser","extraReducers","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"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","sourcesContent":["import {\r\n  createUserWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  sendEmailVerification,\r\n  sendPasswordResetEmail,\r\n  setPersistence,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n  updateProfile,\r\n} from \"@firebase/auth\";\r\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { auth, db } from \"../firebase/firebase\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nexport const handleSignUp = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user) => {\r\n    const response = await createUserWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n\r\n    await updateProfile(auth.currentUser, {\r\n      displayName: user.username,\r\n    });\r\n    await setDoc(doc(db, \"users\", response.user.uid), {\r\n      username: auth.currentUser.displayName,\r\n      createdAt: new Date(),\r\n      email: user.email,\r\n    });\r\n    return user.username;\r\n  }\r\n);\r\nexport const handleSignIn = createAsyncThunk(\r\n  \"handleSignIn/auth\",\r\n  async ({ user, checked }) => {\r\n    //   const persistance = await setPersistence(auth,checked? localStorage:sessionStorage)\r\n    const response = await signInWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n    // const sentV = await sendEmailVerification(response.user);\r\n  }\r\n);\r\nexport const handleForgetPass = createAsyncThunk(\r\n  \"handleForgetPass/auth\",\r\n  async (email) => {\r\n    await sendPasswordResetEmail(auth, email);\r\n  }\r\n);\r\nexport const getCurrent = createAsyncThunk(\"getCurrent/auth\", async () => {\r\n  const user = (await getDoc(doc(db, \"users\", auth.currentUser.uid))).data();\r\n  console.log(\"this is someone\", user);\r\n  return user;\r\n\r\n  // const sentV = await sendEmailVerification(response.user);\r\n});\r\n\r\nexport const googleSignin = createAsyncThunk(\r\n  \"googleSignin/auth\",\r\n  async (user) => {\r\n    const googleProvider = new GoogleAuthProvider();\r\n    // const presist = await setPersistence(auth, localStorage);\r\n    const response = await signInWithPopup(auth, googleProvider);\r\n    const docSnap = (await getDoc(doc(db, \"users\", response.user.uid))).data();\r\n\r\n    if (!docSnap) {\r\n      await setDoc(doc(db, \"users\", response.user.uid), {\r\n        username: response.user.displayName,\r\n        createdAt: new Date(),\r\n        email: response.user.email,\r\n        likes: [],\r\n      });\r\n    }\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    response: \"\",\r\n    currentUser: \"\",\r\n    google: { status: \"\" },\r\n    forgotPass: { status: \"\" },\r\n    error: \"\",\r\n  },\r\n  reducers: {\r\n    loginHandler(state, action) {\r\n      state.isLoggedIn = action.payload;\r\n    },\r\n    setCurrentUser(state, action) {\r\n      state.currentUser = action.payload;\r\n      state.isLoggedIn = !!action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.auth,\r\n      };\r\n    },\r\n    [handleSignUp.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignUp.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n    },\r\n\r\n    [handleSignUp.rejected]: (state, action) => {\r\n      state.response = action.error.message;\r\n    },\r\n    [handleSignIn.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignIn.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n      state.error = \"\";\r\n    },\r\n\r\n    [handleSignIn.rejected]: (state, action) => {\r\n      let error;\r\n      if (action.error.message === \"Firebase: Error (auth/user-not-found).\") {\r\n        error = \"There is no such a user, make sure to use the correct email.\";\r\n      } else if (\r\n        action.error.message ===\r\n        \"Firebase: Access to this account has been temporarily disabled due to many failed login attempts. You can immediately restore it by resetting your password or you can try again later. (auth/too-many-requests).\"\r\n      ) {\r\n        error = \"Too many attempts, try again later.\";\r\n      } else if (\r\n        action.error.message === \"Firebase: Error (auth/wrong-password).\"\r\n      ) {\r\n        error = \"Wrong password, try again.\";\r\n      }\r\n\r\n      state.response = \"error\";\r\n      state.error = error;\r\n    },\r\n    [googleSignin.pending]: (state, action) => {\r\n      state.google.status = \"loading\";\r\n    },\r\n    [googleSignin.fulfilled]: (state, action) => {\r\n      state.google.status = \"success\";\r\n    },\r\n\r\n    [googleSignin.rejected]: (state, action) => {\r\n      state.google.status = action.error.message;\r\n    },\r\n    [handleForgetPass.pending]: (state, action) => {\r\n      state.forgotPass.status = \"loading\";\r\n    },\r\n    [handleForgetPass.fulfilled]: (state, action) => {\r\n      state.forgotPass.status = \"success\";\r\n    },\r\n\r\n    [handleForgetPass.rejected]: (state, action) => {\r\n      state.forgotPass.status = action.error.message;\r\n    },\r\n    [getCurrent.fulfilled]: (state, action) => {\r\n      state.currentUser = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const { loginHandler, setCurrentUser } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}