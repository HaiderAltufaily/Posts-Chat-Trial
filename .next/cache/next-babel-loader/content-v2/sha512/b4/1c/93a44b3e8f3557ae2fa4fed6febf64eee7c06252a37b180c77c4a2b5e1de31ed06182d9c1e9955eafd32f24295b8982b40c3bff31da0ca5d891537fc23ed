{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport usersSlice from \"./usersSlice\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { nextReduxCookieMiddleware, wrapMakeStore } from \"next-redux-cookie-wrapper\";\nimport authSlice from \"./authSlice\";\nimport postsSlice from \"./postsSlice\";\nimport repliesSlice from \"./repliesSlice\";\n\nconst makeStore = () => configureStore({\n  reducer: {\n    users: usersSlice,\n    auth: authSlice,\n    posts: postsSlice,\n    replies: repliesSlice\n  },\n  middleware: getDefaultMiddleware => {\n    return getDefaultMiddleware({\n      serializableCheck: false //   ignoredActions: [\n      //     \"submitPost/posts/fulfilled\",\n      //     \"getCurrent/auth/fulfilled\",\n      //     \"posts/setPosts\",\n      //     \"posts/getPosts\",\n      //     \"getAllPosts/posts/fulfilled\",\n      //     \"getSingleUser/users/fulfilled\",\n      //     \"getSingleUser/users/pending\",\n      //     \"auth/setCurrentUser\",\n      //     \"auth/setCurrentUser\",\n      //     \"addLike/posts/fulfilled\",\n      //     \"addLike/posts/pending\",\n      //   ],\n      // },\n\n    });\n  }\n}); // const makeStore = wrapMakeStore(() =>\n//   configureStore({\n//     reducer: { users: usersSlice, auth: authSlice, posts: postsSlice },\n//     middleware: (getDefaultMiddleware) =>\n//       getDefaultMiddleware({ serializableCheck: false }).prepend(\n//         nextReduxCookieMiddleware({\n//           subtrees: [\"my.subtree\"],\n//         })\n//       ),\n//   })\n// );\n\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/store.js"],"names":["configureStore","getDefaultMiddleware","usersSlice","createWrapper","nextReduxCookieMiddleware","wrapMakeStore","authSlice","postsSlice","repliesSlice","makeStore","reducer","users","auth","posts","replies","middleware","serializableCheck","wrapper"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SACEC,yBADF,EAEEC,aAFF,QAGO,2BAHP;AAIA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AACA,MAAMC,SAAS,GAAG,MAChBT,cAAc,CAAC;AACbU,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAET,UADA;AAEPU,IAAAA,IAAI,EAAEN,SAFC;AAGPO,IAAAA,KAAK,EAAEN,UAHA;AAIPO,IAAAA,OAAO,EAAEN;AAJF,GADI;AAObO,EAAAA,UAAU,EAAGd,oBAAD,IAA0B;AACpC,WAAOA,oBAAoB,CAAC;AAC1Be,MAAAA,iBAAiB,EAAE,KADO,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAf0B,KAAD,CAA3B;AAiBD;AAzBY,CAAD,CADhB,C,CA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,OAAO,GAAGd,aAAa,CAACM,SAAD,CAA7B","sourcesContent":["import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport usersSlice from \"./usersSlice\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport {\r\n  nextReduxCookieMiddleware,\r\n  wrapMakeStore,\r\n} from \"next-redux-cookie-wrapper\";\r\nimport authSlice from \"./authSlice\";\r\nimport postsSlice from \"./postsSlice\";\r\nimport repliesSlice from \"./repliesSlice\";\r\nconst makeStore = () =>\r\n  configureStore({\r\n    reducer: {\r\n      users: usersSlice,\r\n      auth: authSlice,\r\n      posts: postsSlice,\r\n      replies: repliesSlice,\r\n    },\r\n    middleware: (getDefaultMiddleware) => {\r\n      return getDefaultMiddleware({\r\n        serializableCheck: false,\r\n        //   ignoredActions: [\r\n        //     \"submitPost/posts/fulfilled\",\r\n        //     \"getCurrent/auth/fulfilled\",\r\n        //     \"posts/setPosts\",\r\n        //     \"posts/getPosts\",\r\n        //     \"getAllPosts/posts/fulfilled\",\r\n        //     \"getSingleUser/users/fulfilled\",\r\n        //     \"getSingleUser/users/pending\",\r\n        //     \"auth/setCurrentUser\",\r\n        //     \"auth/setCurrentUser\",\r\n        //     \"addLike/posts/fulfilled\",\r\n        //     \"addLike/posts/pending\",\r\n        //   ],\r\n        // },\r\n      });\r\n    },\r\n  });\r\n// const makeStore = wrapMakeStore(() =>\r\n//   configureStore({\r\n//     reducer: { users: usersSlice, auth: authSlice, posts: postsSlice },\r\n//     middleware: (getDefaultMiddleware) =>\r\n//       getDefaultMiddleware({ serializableCheck: false }).prepend(\r\n//         nextReduxCookieMiddleware({\r\n//           subtrees: [\"my.subtree\"],\r\n//         })\r\n//       ),\r\n//   })\r\n// );\r\nexport const wrapper = createWrapper(makeStore);\r\n"]},"metadata":{},"sourceType":"module"}