{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport usersSlice from \"./usersSlice\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { nextReduxCookieMiddleware, wrapMakeStore } from \"next-redux-cookie-wrapper\";\nimport authSlice from \"./authSlice\";\nimport postsSlice, { setPosts, submitPost } from \"./postsSlice\";\nimport { Timestamp } from \"@firebase/firestore\";\n\nconst makeStore = () => configureStore({\n  reducer: {\n    users: usersSlice,\n    auth: authSlice,\n    posts: postsSlice\n  },\n  middleware: getDefaultMiddleware => {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: submitPost,\n        isSerializable: Timestamp => true\n      }\n    });\n  }\n}); // const makeStore = wrapMakeStore(() =>\n//   configureStore({\n//     reducer: { users: usersSlice },\n//     middleware: (getDefaultMiddleware) =>\n//       getDefaultMiddleware().prepend(\n//         nextReduxCookieMiddleware({\n//           subtrees: [\"my.subtree\"],\n//         })\n//       ),\n//   })\n// );\n\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/store.js"],"names":["configureStore","getDefaultMiddleware","usersSlice","createWrapper","nextReduxCookieMiddleware","wrapMakeStore","authSlice","postsSlice","setPosts","submitPost","Timestamp","makeStore","reducer","users","auth","posts","middleware","serializableCheck","ignoredActions","isSerializable","wrapper"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SACEC,yBADF,EAEEC,aAFF,QAGO,2BAHP;AAIA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,IAAqBC,QAArB,EAA+BC,UAA/B,QAAiD,cAAjD;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AACA,MAAMC,SAAS,GAAG,MAChBX,cAAc,CAAC;AACbY,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEX,UADA;AAEPY,IAAAA,IAAI,EAAER,SAFC;AAGPS,IAAAA,KAAK,EAAER;AAHA,GADI;AAMbS,EAAAA,UAAU,EAAGf,oBAAD,IAA0B;AACpC,WAAOA,oBAAoB,CAAC;AAC1BgB,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,cAAc,EAAET,UADC;AAEjBU,QAAAA,cAAc,EAAGT,SAAD,IAAe;AAFd;AADO,KAAD,CAA3B;AAMD;AAbY,CAAD,CADhB,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMU,OAAO,GAAGjB,aAAa,CAACQ,SAAD,CAA7B","sourcesContent":["import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport usersSlice from \"./usersSlice\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport {\r\n  nextReduxCookieMiddleware,\r\n  wrapMakeStore,\r\n} from \"next-redux-cookie-wrapper\";\r\nimport authSlice from \"./authSlice\";\r\nimport postsSlice, { setPosts, submitPost } from \"./postsSlice\";\r\nimport { Timestamp } from \"@firebase/firestore\";\r\nconst makeStore = () =>\r\n  configureStore({\r\n    reducer: {\r\n      users: usersSlice,\r\n      auth: authSlice,\r\n      posts: postsSlice,\r\n    },\r\n    middleware: (getDefaultMiddleware) => {\r\n      return getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: submitPost,\r\n          isSerializable: (Timestamp) => true,\r\n        },\r\n      });\r\n    },\r\n  });\r\n// const makeStore = wrapMakeStore(() =>\r\n//   configureStore({\r\n//     reducer: { users: usersSlice },\r\n//     middleware: (getDefaultMiddleware) =>\r\n//       getDefaultMiddleware().prepend(\r\n//         nextReduxCookieMiddleware({\r\n//           subtrees: [\"my.subtree\"],\r\n//         })\r\n//       ),\r\n//   })\r\n// );\r\nexport const wrapper = createWrapper(makeStore);\r\n"]},"metadata":{},"sourceType":"module"}