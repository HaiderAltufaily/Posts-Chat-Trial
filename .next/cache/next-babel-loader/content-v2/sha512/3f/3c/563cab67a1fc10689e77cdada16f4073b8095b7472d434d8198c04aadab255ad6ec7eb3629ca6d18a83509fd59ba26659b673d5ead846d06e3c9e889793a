{"ast":null,"code":"import { setDoc } from \"@firebase/firestore\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nasync function useFetch({\n  method,\n  url,\n  body\n}) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  console.log(method, url, body); //   await axios[method](url, body)\n  //     .then((d) => {\n  //       setData(d.data), setIsLoading(false);\n  //     })\n  //     .catch((err) => {\n  //       setIsLoading(false);\n  //       setError(err.message);\n  //     });\n\n  return {\n    isLoading,\n    error,\n    data\n  };\n}\n\nexport default useFetch;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/hooks/useFetch.js"],"names":["setDoc","axios","useState","useFetch","method","url","body","isLoading","setIsLoading","error","setError","data","setData","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,eAAeC,QAAf,CAAwB;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,GAAV;AAAeC,EAAAA;AAAf,CAAxB,EAA+C;AAC7C,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACO,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAA,OAACS,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAoBC,GAApB,EAAyBC,IAAzB,EAJ6C,CAK7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO;AACLC,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD;;AACD,eAAeR,QAAf","sourcesContent":["import { setDoc } from \"@firebase/firestore\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nasync function useFetch({ method, url, body }) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  console.log(method, url, body);\r\n  //   await axios[method](url, body)\r\n  //     .then((d) => {\r\n  //       setData(d.data), setIsLoading(false);\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       setIsLoading(false);\r\n  //       setError(err.message);\r\n  //     });\r\n  return {\r\n    isLoading,\r\n    error,\r\n    data,\r\n  };\r\n}\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}