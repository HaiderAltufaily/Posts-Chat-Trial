{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { db } from \"../firebase/firebase\";\nexport const submitPost = createAsyncThunk(\"submitPost/posts\", async postData => {\n  return axios.post(\"/api/new-post\", postData);\n});\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async post => {\n  axios.delete(`/api/posts/${post}`);\n}); // export const getAllPosts = createAsyncThunk(\n//   \"getAllPosts/posts\",\n//   async (_, { dispatch }) => {\n//     const unsub = onSnapshot(collection(db, \"posts\"), (snap) => {\n//       const u = snap.docs.map((doc) => {\n//         return { ...doc.data(), id: doc.id };\n//       });\n//       console.log(dispatch(setPosts(u)));\n//     });\n//     return unsub;\n//   }\n// );\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    postStatus: \"\",\n    deletePostStatus: \"\",\n    realTimePosts: [],\n    unsub: \"\"\n  },\n  reducers: {\n    getAllPosts(state, action) {\n      const q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\n      const unsub = onSnapshot(q, snaap => {\n        const post = snaap.docs.map(doc => {\n          return _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          });\n        });\n        state.realTimePosts.push(post);\n      });\n      state.unsub = unsub;\n    }\n\n  },\n  extraReducers: {\n    [HYDRATE]: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), action.payload.some);\n    },\n    [submitPost.pending]: (state, action) => {\n      state.postStatus = \"loading\";\n    },\n    [submitPost.fulfilled]: (state, action) => {\n      state.postStatus = \"success\";\n    },\n    [submitPost.rejected]: (state, action) => {\n      state.postStatus = action.error.message;\n    },\n    [deletePost.pending]: (state, action) => {\n      state.deletePostStatus = \"loading\";\n    },\n    [deletePost.fulfilled]: (state, action) => {\n      state.deletePostStatus = \"success\";\n    },\n    [deletePost.rejected]: (state, action) => {\n      state.deletePostStatus = action.error.message;\n    }\n  }\n});\nexport const {\n  getAllPosts\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/postsSlice.js"],"names":["collection","onSnapshot","orderBy","query","createAsyncThunk","createSlice","axios","HYDRATE","db","submitPost","postData","post","deletePost","delete","postsSlice","name","initialState","postStatus","deletePostStatus","realTimePosts","unsub","reducers","getAllPosts","state","action","q","snaap","docs","map","doc","data","id","push","extraReducers","payload","some","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,EAA0CC,KAA1C,QAAuD,qBAAvD;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,EAAT,QAAmB,sBAAnB;AACA,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CACxC,kBADwC,EAExC,MAAOM,QAAP,IAAoB;AAClB,SAAOJ,KAAK,CAACK,IAAN,CAAW,eAAX,EAA4BD,QAA5B,CAAP;AACD,CAJuC,CAAnC;AAMP,OAAO,MAAME,UAAU,GAAGR,gBAAgB,CAAC,kBAAD,EAAqB,MAAOO,IAAP,IAAgB;AAC7EL,EAAAA,KAAK,CAACO,MAAN,CAAc,cAAaF,IAAK,EAAhC;AACD,CAFyC,CAAnC,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMG,UAAU,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,EADA;AAEZC,IAAAA,gBAAgB,EAAE,EAFN;AAGZC,IAAAA,aAAa,EAAE,EAHH;AAIZC,IAAAA,KAAK,EAAE;AAJK,GAFe;AAQ7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMC,CAAC,GAAGtB,KAAK,CAACH,UAAU,CAACQ,EAAD,EAAK,OAAL,CAAX,EAA0BN,OAAO,CAAC,MAAD,EAAS,MAAT,CAAjC,CAAf;AACA,YAAMkB,KAAK,GAAGnB,UAAU,CAACwB,CAAD,EAAKC,KAAD,IAAW;AACrC,cAAMf,IAAI,GAAGe,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAgBC,GAAD,IAAS;AACnC,iDAAYA,GAAG,CAACC,IAAJ,EAAZ;AAAwBC,YAAAA,EAAE,EAAEF,GAAG,CAACE;AAAhC;AACD,SAFY,CAAb;AAGAR,QAAAA,KAAK,CAACJ,aAAN,CAAoBa,IAApB,CAAyBrB,IAAzB;AACD,OALuB,CAAxB;AAMAY,MAAAA,KAAK,CAACH,KAAN,GAAcA,KAAd;AACD;;AAVO,GARmB;AAoB7Ba,EAAAA,aAAa,EAAE;AACb,KAAC1B,OAAD,GAAW,CAACgB,KAAD,EAAQC,MAAR,KAAmB;AAC5B,6CACKD,KADL,GAEKC,MAAM,CAACU,OAAP,CAAeC,IAFpB;AAID,KANY;AAQb,KAAC1B,UAAU,CAAC2B,OAAZ,GAAsB,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACN,UAAN,GAAmB,SAAnB;AACD,KAVY;AAWb,KAACR,UAAU,CAAC4B,SAAZ,GAAwB,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACN,UAAN,GAAmB,SAAnB;AACD,KAbY;AAeb,KAACR,UAAU,CAAC6B,QAAZ,GAAuB,CAACf,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACN,UAAN,GAAmBO,MAAM,CAACe,KAAP,CAAaC,OAAhC;AACD,KAjBY;AAmBb,KAAC5B,UAAU,CAACwB,OAAZ,GAAsB,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACL,gBAAN,GAAyB,SAAzB;AACD,KArBY;AAsBb,KAACN,UAAU,CAACyB,SAAZ,GAAwB,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACL,gBAAN,GAAyB,SAAzB;AACD,KAxBY;AA0Bb,KAACN,UAAU,CAAC0B,QAAZ,GAAuB,CAACf,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACL,gBAAN,GAAyBM,MAAM,CAACe,KAAP,CAAaC,OAAtC;AACD;AA5BY;AApBc,CAAD,CAA9B;AAmDA,OAAO,MAAM;AAAElB,EAAAA;AAAF,IAAkBR,UAAU,CAAC2B,OAAnC;AACP,eAAe3B,UAAU,CAAC4B,OAA1B","sourcesContent":["import { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { db } from \"../firebase/firebase\";\r\nexport const submitPost = createAsyncThunk(\r\n  \"submitPost/posts\",\r\n  async (postData) => {\r\n    return axios.post(\"/api/new-post\", postData);\r\n  }\r\n);\r\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async (post) => {\r\n  axios.delete(`/api/posts/${post}`);\r\n});\r\n// export const getAllPosts = createAsyncThunk(\r\n//   \"getAllPosts/posts\",\r\n//   async (_, { dispatch }) => {\r\n//     const unsub = onSnapshot(collection(db, \"posts\"), (snap) => {\r\n//       const u = snap.docs.map((doc) => {\r\n//         return { ...doc.data(), id: doc.id };\r\n//       });\r\n\r\n//       console.log(dispatch(setPosts(u)));\r\n//     });\r\n//     return unsub;\r\n//   }\r\n// );\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    postStatus: \"\",\r\n    deletePostStatus: \"\",\r\n    realTimePosts: [],\r\n    unsub: \"\",\r\n  },\r\n  reducers: {\r\n    getAllPosts(state, action) {\r\n      const q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\r\n      const unsub = onSnapshot(q, (snaap) => {\r\n        const post = snaap.docs.map((doc) => {\r\n          return { ...doc.data(), id: doc.id };\r\n        });\r\n        state.realTimePosts.push(post);\r\n      });\r\n      state.unsub = unsub;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.some,\r\n      };\r\n    },\r\n\r\n    [submitPost.pending]: (state, action) => {\r\n      state.postStatus = \"loading\";\r\n    },\r\n    [submitPost.fulfilled]: (state, action) => {\r\n      state.postStatus = \"success\";\r\n    },\r\n\r\n    [submitPost.rejected]: (state, action) => {\r\n      state.postStatus = action.error.message;\r\n    },\r\n\r\n    [deletePost.pending]: (state, action) => {\r\n      state.deletePostStatus = \"loading\";\r\n    },\r\n    [deletePost.fulfilled]: (state, action) => {\r\n      state.deletePostStatus = \"success\";\r\n    },\r\n\r\n    [deletePost.rejected]: (state, action) => {\r\n      state.deletePostStatus = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { getAllPosts } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}