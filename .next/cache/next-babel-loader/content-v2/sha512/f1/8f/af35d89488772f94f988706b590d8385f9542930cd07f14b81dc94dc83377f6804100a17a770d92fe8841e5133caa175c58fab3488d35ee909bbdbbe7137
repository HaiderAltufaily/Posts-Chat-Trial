{"ast":null,"code":"import { createUserWithEmailAndPassword, GoogleAuthProvider, sendEmailVerification, signInWithEmailAndPassword, signInWithPopup, updateProfile } from \"@firebase/auth\";\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { auth, db } from \"../firebase/firebase\";\nexport const handleSignUp = createAsyncThunk(\"handleSignUp/auth\", async user => {\n  const response = await createUserWithEmailAndPassword(auth, user.email, user.password); // const sentV = await sendEmailVerification(response.user);\n\n  await updateProfile(auth.currentUser, {\n    displayName: user.username\n  });\n  await setDoc(doc(db, \"users\", response.user.uid), {\n    username: displayName,\n    createdAt: new Date(),\n    email: user.email\n  });\n  return user.username;\n});\nexport const handleSignIn = createAsyncThunk(\"handleSignUp/auth\", async user => {\n  const response = await signInWithEmailAndPassword(auth, user.email, user.password); // const sentV = await sendEmailVerification(response.user);\n});\nexport const googleSignin = createAsyncThunk(\"handleSignUp/auth\", async (user, {\n  getState\n}) => {\n  console.log(getState().userInfo);\n  const googleProvider = new GoogleAuthProvider();\n  const response = await signInWithPopup(auth, googleProvider);\n  const docSnap = await getDoc(doc(db, \"users\", response.user.uid));\n\n  if (!docSnap) {\n    await setDoc(doc(db, \"users\", response.user.uid), {\n      username: response.user.displayName,\n      createdAt: new Date(),\n      email: response.user.email\n    });\n  } else {\n    updateProfile(auth.currentUser, {\n      displayName: getState().userInfo\n    });\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isLoggedIn: false,\n    response: \"\",\n    userInfo: \"\",\n    google: {\n      status: \"\"\n    }\n  },\n  reducers: {\n    loginHandler(state, action) {\n      state.isLoggedIn = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [handleSignUp.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignUp.fulfilled]: (state, action) => {\n      state.response = \"success\";\n      state.userInfo = action.payload;\n    },\n    [handleSignUp.rejected]: (state, action) => {\n      console.log(action.error.message);\n    },\n    [handleSignIn.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignIn.fulfilled]: (state, action) => {\n      state.response = \"success\";\n    },\n    [handleSignIn.rejected]: (state, action) => {\n      console.log(action.error.message);\n    },\n    [googleSignin.pending]: (state, action) => {\n      state.google.status = \"loading\";\n    },\n    [googleSignin.fulfilled]: (state, action) => {\n      state.google.status = \"success\";\n    },\n    [googleSignin.rejected]: (state, action) => {\n      state.google.status = action.error.message;\n    }\n  }\n});\nexport const {\n  loginHandler\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/authSlice.js"],"names":["createUserWithEmailAndPassword","GoogleAuthProvider","sendEmailVerification","signInWithEmailAndPassword","signInWithPopup","updateProfile","addDoc","doc","getDoc","setDoc","createAsyncThunk","createSlice","axios","auth","db","handleSignUp","user","response","email","password","currentUser","displayName","username","uid","createdAt","Date","handleSignIn","googleSignin","getState","console","log","userInfo","googleProvider","docSnap","authSlice","name","initialState","isLoggedIn","google","status","reducers","loginHandler","state","action","payload","extraReducers","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import {\r\n  createUserWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  sendEmailVerification,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n  updateProfile,\r\n} from \"@firebase/auth\";\r\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { auth, db } from \"../firebase/firebase\";\r\n\r\nexport const handleSignUp = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user) => {\r\n    const response = await createUserWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n    // const sentV = await sendEmailVerification(response.user);\r\n    await updateProfile(auth.currentUser, {\r\n      displayName: user.username,\r\n    });\r\n    await setDoc(doc(db, \"users\", response.user.uid), {\r\n      username: displayName,\r\n      createdAt: new Date(),\r\n      email: user.email,\r\n    });\r\n    return user.username;\r\n  }\r\n);\r\nexport const handleSignIn = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user) => {\r\n    const response = await signInWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n    // const sentV = await sendEmailVerification(response.user);\r\n  }\r\n);\r\n\r\nexport const googleSignin = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user, { getState }) => {\r\n    console.log(getState().userInfo);\r\n    const googleProvider = new GoogleAuthProvider();\r\n    const response = await signInWithPopup(auth, googleProvider);\r\n    const docSnap = await getDoc(doc(db, \"users\", response.user.uid));\r\n    if (!docSnap) {\r\n      await setDoc(doc(db, \"users\", response.user.uid), {\r\n        username: response.user.displayName,\r\n        createdAt: new Date(),\r\n        email: response.user.email,\r\n      });\r\n    } else {\r\n      updateProfile(auth.currentUser, {\r\n        displayName: getState().userInfo,\r\n      });\r\n    }\r\n  }\r\n);\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    response: \"\",\r\n    userInfo: \"\",\r\n    google: { status: \"\" },\r\n  },\r\n  reducers: {\r\n    loginHandler(state, action) {\r\n      state.isLoggedIn = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [handleSignUp.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignUp.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n      state.userInfo = action.payload;\r\n    },\r\n\r\n    [handleSignUp.rejected]: (state, action) => {\r\n      console.log(action.error.message);\r\n    },\r\n    [handleSignIn.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignIn.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n    },\r\n\r\n    [handleSignIn.rejected]: (state, action) => {\r\n      console.log(action.error.message);\r\n    },\r\n    [googleSignin.pending]: (state, action) => {\r\n      state.google.status = \"loading\";\r\n    },\r\n    [googleSignin.fulfilled]: (state, action) => {\r\n      state.google.status = \"success\";\r\n    },\r\n\r\n    [googleSignin.rejected]: (state, action) => {\r\n      state.google.status = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { loginHandler } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}