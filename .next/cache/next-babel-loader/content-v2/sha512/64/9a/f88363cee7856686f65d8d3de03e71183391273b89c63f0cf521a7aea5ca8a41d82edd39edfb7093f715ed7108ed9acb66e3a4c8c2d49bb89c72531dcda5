{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createUserWithEmailAndPassword, GoogleAuthProvider, sendEmailVerification, signInWithEmailAndPassword, signInWithPopup, updateProfile } from \"@firebase/auth\";\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { auth, db } from \"../firebase/firebase\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nexport const handleSignUp = createAsyncThunk(\"handleSignUp/auth\", async user => {\n  const response = await createUserWithEmailAndPassword(auth, user.email, user.password);\n  await updateProfile(auth.currentUser, {\n    displayName: user.username\n  });\n  await setDoc(doc(db, \"users\", response.user.uid), {\n    username: auth.currentUser.displayName,\n    createdAt: new Date(),\n    email: user.email\n  });\n  return user.username;\n});\nexport const handleSignIn = createAsyncThunk(\"handleSignUp/auth\", async user => {\n  const response = await signInWithEmailAndPassword(auth, user.email, user.password); // const sentV = await sendEmailVerification(response.user);\n});\nexport const getCurrent = createAsyncThunk(\"getCurrent/auth\", async () => {\n  const user = await getDoc(doc(db, \"users\", auth.currentUser.uid));\n  console.log(user.data()); // const sentV = await sendEmailVerification(response.user);\n});\nexport const googleSignin = createAsyncThunk(\"googleSignin/auth\", async user => {\n  const googleProvider = new GoogleAuthProvider();\n  const response = await signInWithPopup(auth, googleProvider);\n  const docSnap = await getDoc(doc(db, \"users\", response.user.uid));\n\n  if (!docSnap) {\n    await setDoc(doc(db, \"users\", response.user.uid), {\n      username: response.user.displayName,\n      createdAt: new Date(),\n      email: response.user.email\n    });\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isLoggedIn: false,\n    response: \"\",\n    currentUser: \"\",\n    google: {\n      status: \"\"\n    }\n  },\n  reducers: {\n    loginHandler(state, action) {\n      state.isLoggedIn = action.payload;\n    },\n\n    setCurrentUser(state, action) {\n      state.currentUser = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [HYDRATE]: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), action.payload.some);\n    },\n    [handleSignUp.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignUp.fulfilled]: (state, action) => {\n      state.response = \"success\";\n    },\n    [handleSignUp.rejected]: (state, action) => {\n      state.response = action.error.message;\n    },\n    [handleSignIn.pending]: (state, action) => {\n      state.response = \"loading\";\n    },\n    [handleSignIn.fulfilled]: (state, action) => {\n      state.response = \"success\";\n    },\n    [handleSignIn.rejected]: (state, action) => {\n      console.log(action.error.message);\n    },\n    [googleSignin.pending]: (state, action) => {\n      state.google.status = \"loading\";\n    },\n    [googleSignin.fulfilled]: (state, action) => {\n      state.google.status = \"success\";\n    },\n    [googleSignin.rejected]: (state, action) => {\n      state.google.status = action.error.message;\n    }\n  }\n});\nexport const {\n  loginHandler,\n  setCurrentUser\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/authSlice.js"],"names":["createUserWithEmailAndPassword","GoogleAuthProvider","sendEmailVerification","signInWithEmailAndPassword","signInWithPopup","updateProfile","addDoc","doc","getDoc","setDoc","createAsyncThunk","createSlice","axios","auth","db","HYDRATE","handleSignUp","user","response","email","password","currentUser","displayName","username","uid","createdAt","Date","handleSignIn","getCurrent","console","log","data","googleSignin","googleProvider","docSnap","authSlice","name","initialState","isLoggedIn","google","status","reducers","loginHandler","state","action","payload","setCurrentUser","extraReducers","some","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import {\r\n  createUserWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  sendEmailVerification,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n  updateProfile,\r\n} from \"@firebase/auth\";\r\nimport { addDoc, doc, getDoc, setDoc } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { auth, db } from \"../firebase/firebase\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nexport const handleSignUp = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user) => {\r\n    const response = await createUserWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n\r\n    await updateProfile(auth.currentUser, {\r\n      displayName: user.username,\r\n    });\r\n    await setDoc(doc(db, \"users\", response.user.uid), {\r\n      username: auth.currentUser.displayName,\r\n      createdAt: new Date(),\r\n      email: user.email,\r\n    });\r\n    return user.username;\r\n  }\r\n);\r\nexport const handleSignIn = createAsyncThunk(\r\n  \"handleSignUp/auth\",\r\n  async (user) => {\r\n    const response = await signInWithEmailAndPassword(\r\n      auth,\r\n      user.email,\r\n      user.password\r\n    );\r\n    // const sentV = await sendEmailVerification(response.user);\r\n  }\r\n);\r\nexport const getCurrent = createAsyncThunk(\"getCurrent/auth\", async () => {\r\n  const user = await getDoc(doc(db, \"users\", auth.currentUser.uid));\r\n  console.log(user.data());\r\n  // const sentV = await sendEmailVerification(response.user);\r\n});\r\n\r\nexport const googleSignin = createAsyncThunk(\r\n  \"googleSignin/auth\",\r\n  async (user) => {\r\n    const googleProvider = new GoogleAuthProvider();\r\n    const response = await signInWithPopup(auth, googleProvider);\r\n    const docSnap = await getDoc(doc(db, \"users\", response.user.uid));\r\n    if (!docSnap) {\r\n      await setDoc(doc(db, \"users\", response.user.uid), {\r\n        username: response.user.displayName,\r\n        createdAt: new Date(),\r\n        email: response.user.email,\r\n      });\r\n    }\r\n  }\r\n);\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    response: \"\",\r\n    currentUser: \"\",\r\n    google: { status: \"\" },\r\n  },\r\n  reducers: {\r\n    loginHandler(state, action) {\r\n      state.isLoggedIn = action.payload;\r\n    },\r\n    setCurrentUser(state, action) {\r\n      state.currentUser = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.some,\r\n      };\r\n    },\r\n    [handleSignUp.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignUp.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n    },\r\n\r\n    [handleSignUp.rejected]: (state, action) => {\r\n      state.response = action.error.message;\r\n    },\r\n    [handleSignIn.pending]: (state, action) => {\r\n      state.response = \"loading\";\r\n    },\r\n    [handleSignIn.fulfilled]: (state, action) => {\r\n      state.response = \"success\";\r\n    },\r\n\r\n    [handleSignIn.rejected]: (state, action) => {\r\n      console.log(action.error.message);\r\n    },\r\n    [googleSignin.pending]: (state, action) => {\r\n      state.google.status = \"loading\";\r\n    },\r\n    [googleSignin.fulfilled]: (state, action) => {\r\n      state.google.status = \"success\";\r\n    },\r\n\r\n    [googleSignin.rejected]: (state, action) => {\r\n      state.google.status = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { loginHandler, setCurrentUser } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}