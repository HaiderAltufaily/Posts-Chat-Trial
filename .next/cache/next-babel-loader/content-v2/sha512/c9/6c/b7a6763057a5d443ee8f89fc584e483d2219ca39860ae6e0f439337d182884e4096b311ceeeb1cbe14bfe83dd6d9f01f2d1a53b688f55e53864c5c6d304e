{"ast":null,"code":"import _defineProperty from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { collection, onSnapshot } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { db } from \"../firebase/firebase\";\nexport var submitPost = createAsyncThunk(\"submitPost/posts\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(postData) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", axios.post(\"/api/new-post\", postData));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var deletePost = createAsyncThunk(\"deletePost/posts\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            axios[\"delete\"](\"/api/posts/\".concat(post));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var getAllPosts = createAsyncThunk(\"getAllPosts/posts\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_, _ref3) {\n    var dispatch, unsub;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch = _ref3.dispatch;\n            unsub = onSnapshot(collection(db, \"posts\"), function (snap) {\n              var u = snap.docs.map(function (doc) {\n                return _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id\n                });\n              });\n              console.log(u);\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nvar postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    postStatus: \"\",\n    deletePostStatus: \"\",\n    realTimePosts: []\n  },\n  reducers: {\n    setPosts: function setPosts(state, action) {\n      // const unsub = onSnapshot(collection(db,))\n      state.realTimePosts = action.payload;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, HYDRATE, function (state, action) {\n    return _objectSpread(_objectSpread({}, state), action.payload.some);\n  }), _defineProperty(_extraReducers, submitPost.pending, function (state, action) {\n    state.postStatus = \"loading\";\n  }), _defineProperty(_extraReducers, submitPost.fulfilled, function (state, action) {\n    state.postStatus = \"success\";\n  }), _defineProperty(_extraReducers, submitPost.rejected, function (state, action) {\n    state.postStatus = action.error.message;\n  }), _defineProperty(_extraReducers, deletePost.pending, function (state, action) {\n    state.deletePostStatus = \"loading\";\n  }), _defineProperty(_extraReducers, deletePost.fulfilled, function (state, action) {\n    state.deletePostStatus = \"success\";\n  }), _defineProperty(_extraReducers, deletePost.rejected, function (state, action) {\n    state.deletePostStatus = action.error.message;\n  }), _extraReducers)\n});\nvar setPosts = postsSlice.actions.setPosts;\nexport { setPosts };\nexport default postsSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/postsSlice.js"],"names":["collection","onSnapshot","createAsyncThunk","createSlice","axios","HYDRATE","db","submitPost","postData","post","deletePost","getAllPosts","_","dispatch","unsub","snap","u","docs","map","doc","data","id","console","log","postsSlice","name","initialState","postStatus","deletePostStatus","realTimePosts","reducers","setPosts","state","action","payload","extraReducers","some","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import { collection, onSnapshot } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { db } from \"../firebase/firebase\";\r\nexport const submitPost = createAsyncThunk(\r\n  \"submitPost/posts\",\r\n  async (postData) => {\r\n    return axios.post(\"/api/new-post\", postData);\r\n  }\r\n);\r\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async (post) => {\r\n  axios.delete(`/api/posts/${post}`);\r\n});\r\nexport const getAllPosts = createAsyncThunk(\r\n  \"getAllPosts/posts\",\r\n  async (_, { dispatch }) => {\r\n    const unsub = onSnapshot(collection(db, \"posts\"), (snap) => {\r\n      const u = snap.docs.map((doc) => {\r\n        return { ...doc.data(), id: doc.id };\r\n      });\r\n      console.log(u);\r\n    });\r\n  }\r\n);\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    postStatus: \"\",\r\n    deletePostStatus: \"\",\r\n    realTimePosts: [],\r\n  },\r\n  reducers: {\r\n    setPosts(state, action) {\r\n      // const unsub = onSnapshot(collection(db,))\r\n      state.realTimePosts = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.some,\r\n      };\r\n    },\r\n\r\n    [submitPost.pending]: (state, action) => {\r\n      state.postStatus = \"loading\";\r\n    },\r\n    [submitPost.fulfilled]: (state, action) => {\r\n      state.postStatus = \"success\";\r\n    },\r\n\r\n    [submitPost.rejected]: (state, action) => {\r\n      state.postStatus = action.error.message;\r\n    },\r\n\r\n    [deletePost.pending]: (state, action) => {\r\n      state.deletePostStatus = \"loading\";\r\n    },\r\n    [deletePost.fulfilled]: (state, action) => {\r\n      state.deletePostStatus = \"success\";\r\n    },\r\n\r\n    [deletePost.rejected]: (state, action) => {\r\n      state.deletePostStatus = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { setPosts } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}