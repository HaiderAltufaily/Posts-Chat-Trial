{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Udemy\\\\nextjs\\\\06-onwards-to-a-bigger-project-starting-project\\\\components\\\\meetups\\\\MeetUpDetails.js\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { auth } from \"../../firebase/firebase\";\nimport useFetch from \"../../hooks/useFetch\";\nimport { addReply } from \"../../store/repliesSlice\";\nimport { getSingleUser } from \"../../store/usersSlice\";\nimport classes from \"./MeetUpDetail.module.css\";\n\nfunction MeetUpDetails(props) {\n  const {\n    0: useer,\n    1: setUser\n  } = useState({});\n  const replyRef = useRef();\n  const dispatch = useDispatch(); // const user = useSelector((state) => state.users.user);\n\n  const userId = props.user;\n  const replyStatus = useSelector(state => state.replies.addReplyStatus);\n  const {\n    isLoading,\n    error,\n    data: user\n  } = useFetch({\n    url: `/api/${userId}`,\n    method: \"get\"\n  });\n\n  function submitHandler(e) {\n    e.preventDefault();\n\n    if (auth.currentUser) {\n      const reply = {\n        content: replyRef.current.value,\n        user: auth.currentUser.uid,\n        postId: props.id\n      };\n      dispatch(addReply({\n        reply,\n        postId: props.id\n      })); // async ({ postId, reply }) => {\n      //   console.log(reply);\n      //   return axios.post(`/api/replies/${postId}`, reply);\n      // }\n\n      const data = useFetch({\n        url: `/api/replies/${props.id}`,\n        method: \"post\",\n        body: reply\n      });\n      console.log(data);\n    }\n  }\n\n  console.log(user);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.detail,\n    children: [/*#__PURE__*/_jsxDEV(\"address\", {\n      style: {\n        textAlign: \"left\"\n      },\n      children: props.time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", user.username, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            marginRight: \"1rem\"\n          },\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"reply\",\n            children: \"Post Reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            required: true,\n            id: \"reply\",\n            ref: replyRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: replyStatus === \"loading\" ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Submit reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MeetUpDetails;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/components/meetups/MeetUpDetails.js"],"names":["Spinner","React","Fragment","useEffect","useRef","useState","useDispatch","useSelector","auth","useFetch","addReply","getSingleUser","classes","MeetUpDetails","props","useer","setUser","replyRef","dispatch","userId","user","replyStatus","state","replies","addReplyStatus","isLoading","error","data","url","method","submitHandler","e","preventDefault","currentUser","reply","content","current","value","uid","postId","id","body","console","log","detail","textAlign","time","username","title","image","description","form","display","justifyContent","alignItems","flex","marginRight","control","actions"],"mappings":"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","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\";\r\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { auth } from \"../../firebase/firebase\";\r\nimport useFetch from \"../../hooks/useFetch\";\r\nimport { addReply } from \"../../store/repliesSlice\";\r\nimport { getSingleUser } from \"../../store/usersSlice\";\r\n\r\nimport classes from \"./MeetUpDetail.module.css\";\r\n\r\nfunction MeetUpDetails(props) {\r\n  const [useer, setUser] = useState({});\r\n  const replyRef = useRef();\r\n  const dispatch = useDispatch();\r\n  // const user = useSelector((state) => state.users.user);\r\n  const userId = props.user;\r\n  const replyStatus = useSelector((state) => state.replies.addReplyStatus);\r\n  const {\r\n    isLoading,\r\n    error,\r\n    data: user,\r\n  } = useFetch({\r\n    url: `/api/${userId}`,\r\n    method: \"get\",\r\n  });\r\n  function submitHandler(e) {\r\n    e.preventDefault();\r\n    if (auth.currentUser) {\r\n      const reply = {\r\n        content: replyRef.current.value,\r\n        user: auth.currentUser.uid,\r\n        postId: props.id,\r\n      };\r\n      dispatch(addReply({ reply, postId: props.id }));\r\n      // async ({ postId, reply }) => {\r\n      //   console.log(reply);\r\n      //   return axios.post(`/api/replies/${postId}`, reply);\r\n      // }\r\n      const data = useFetch({\r\n        url: `/api/replies/${props.id}`,\r\n        method: \"post\",\r\n        body: reply,\r\n      });\r\n      console.log(data);\r\n    }\r\n  }\r\n  console.log(user);\r\n  return (\r\n    <section className={classes.detail}>\r\n      <address style={{ textAlign: \"left\" }}>{props.time}</address>\r\n      <h2> {user.username} </h2>\r\n      <h1>{props.title}</h1>\r\n      <img src={props.image}></img>\r\n\r\n      <p>{props.description}</p>\r\n      <form className={classes.form} onSubmit={submitHandler}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-around\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{ flex: 1, marginRight: \"1rem\" }}\r\n            className={classes.control}\r\n          >\r\n            <label htmlFor=\"reply\">Post Reply</label>\r\n            <input type=\"text\" required id=\"reply\" ref={replyRef} />\r\n          </div>\r\n          <div className={classes.actions}>\r\n            {replyStatus === \"loading\" ? (\r\n              <Spinner />\r\n            ) : (\r\n              <button>Submit reply</button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MeetUpDetails;\r\n"]},"metadata":{},"sourceType":"module"}