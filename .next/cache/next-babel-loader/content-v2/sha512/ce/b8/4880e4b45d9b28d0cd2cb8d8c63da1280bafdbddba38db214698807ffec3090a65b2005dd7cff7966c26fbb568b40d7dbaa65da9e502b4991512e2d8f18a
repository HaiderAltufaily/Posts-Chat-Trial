{"ast":null,"code":"import _regeneratorRuntime from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { setDoc } from \"@firebase/firestore\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nvar useFetch = function useFetch(_ref) {\n  _s();\n\n  var url = _ref.url,\n      _ref$method = _ref.method,\n      method = _ref$method === void 0 ? \"GET\" : _ref$method,\n      body = _ref.body;\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState([]),\n      data = _useState3[0],\n      setData = _useState3[1]; //   console.log(method, url, body);\n\n\n  function getData() {\n    return _getData.apply(this, arguments);\n  }\n\n  function _getData() {\n    _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(method);\n              _context.next = 3;\n              return axios[method](url).then(function (data) {\n                setData(data.data);\n                setIsLoading(false);\n              })[\"catch\"](function (err) {\n                setError(err.message);\n                setIsLoading(false);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getData.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    getData();\n  }, []);\n  return {\n    isLoading: isLoading,\n    error: error,\n    data: data\n  };\n};\n\n_s(useFetch, \"AxZr47JVOJi/LgN2hHfSVFIhSbU=\");\n\nexport default useFetch;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/hooks/useFetch.js"],"names":["setDoc","axios","useEffect","useState","useFetch","url","method","body","isLoading","setIsLoading","error","setError","data","setData","getData","console","log","then","err","message"],"mappings":";;;;;AAAA,SAASA,MAAT,QAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAmC;AAAA;;AAAA,MAAhCC,GAAgC,QAAhCA,GAAgC;AAAA,yBAA3BC,MAA2B;AAAA,MAA3BA,MAA2B,4BAAlB,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBAChBJ,QAAQ,CAAC,IAAD,CADQ;AAAA,MAC3CK,SAD2C;AAAA,MAChCC,YADgC;;AAAA,mBAExBN,QAAQ,CAAC,IAAD,CAFgB;AAAA,MAE3CO,KAF2C;AAAA,MAEpCC,QAFoC;;AAAA,mBAG1BR,QAAQ,CAAC,EAAD,CAHkB;AAAA,MAG3CS,IAH2C;AAAA,MAGrCC,OAHqC,kBAIlD;;;AAJkD,WAKnCC,OALmC;AAAA;AAAA;;AAAA;AAAA,wEAKlD;AAAA;AAAA;AAAA;AAAA;AACEC,cAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AADF;AAAA,qBAEQL,KAAK,CAACK,MAAD,CAAL,CAAcD,GAAd,EACHY,IADG,CACE,UAACL,IAAD,EAAU;AACdC,gBAAAA,OAAO,CAACD,IAAI,CAACA,IAAN,CAAP;AACAH,gBAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,eAJG,WAKG,UAACS,GAAD,EAAS;AACdP,gBAAAA,QAAQ,CAACO,GAAG,CAACC,OAAL,CAAR;AACAV,gBAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,eARG,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALkD;AAAA;AAAA;;AAiBlDP,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO;AACLN,IAAAA,SAAS,EAATA,SADK;AAELE,IAAAA,KAAK,EAALA,KAFK;AAGLE,IAAAA,IAAI,EAAJA;AAHK,GAAP;AAKD,CAzBD;;GAAMR,Q;;AA0BN,eAAeA,QAAf","sourcesContent":["import { setDoc } from \"@firebase/firestore\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetch = ({ url, method = \"GET\", body }) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  //   console.log(method, url, body);\r\n  async function getData() {\r\n    console.log(method);\r\n    await axios[method](url)\r\n      .then((data) => {\r\n        setData(data.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  return {\r\n    isLoading,\r\n    error,\r\n    data,\r\n  };\r\n};\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}