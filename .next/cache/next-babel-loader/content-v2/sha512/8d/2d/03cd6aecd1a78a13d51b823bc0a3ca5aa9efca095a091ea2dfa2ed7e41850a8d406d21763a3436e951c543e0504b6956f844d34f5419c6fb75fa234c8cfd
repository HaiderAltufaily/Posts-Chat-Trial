{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Udemy\\\\nextjs\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[postId]\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { doc, onSnapshot } from \"@firebase/firestore\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\nimport ReplyList from \"../../components/meetups/ReplyList\";\nimport db from \"../../firebase/firebase\";\nimport { getSingleUser } from \"../../store/usersSlice\";\n\nfunction MeetUpDetailsPage(_ref) {\n  _s();\n\n  var posts = _ref.posts;\n\n  var _useState = useState([]),\n      replies = _useState[0],\n      setReplies = _useState[1];\n\n  useEffect(function () {\n    var unsub = onSnapshot(doc(db, \"posts\", posts.id), function (snapshot) {\n      setReplies(snapshot.data().replies);\n    });\n    return function () {\n      return unsub();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MeetUpDetails, {\n      title: posts.title,\n      time: posts.time,\n      description: posts.description,\n      image: posts.image,\n      user: posts.user,\n      id: posts.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReplyList, {\n      replies: replies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeetUpDetailsPage, \"2HQ5WUinV6DnAmoZ9iP9Jy3FIPE=\");\n\n_c = MeetUpDetailsPage;\nexport var __N_SSG = true;\nexport default MeetUpDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetUpDetailsPage\");","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[postId]/index.js"],"names":["doc","onSnapshot","React","Fragment","useEffect","useState","MeetUpDetails","ReplyList","db","getSingleUser","MeetUpDetailsPage","posts","replies","setReplies","unsub","id","snapshot","data","title","time","description","image","user"],"mappings":";;;;;AAAA,SAEEA,GAFF,EAKEC,UALF,QAMO,qBANP;AAQA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,EAAP,MAAe,yBAAf;AAEA,SAASC,aAAT,QAA8B,wBAA9B;;AACA,SAASC,iBAAT,OAAsC;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACNN,QAAQ,CAAC,EAAD,CADF;AAAA,MAC7BO,OAD6B;AAAA,MACpBC,UADoB;;AAEpCT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMU,KAAK,GAAGb,UAAU,CAACD,GAAG,CAACQ,EAAD,EAAK,OAAL,EAAcG,KAAK,CAACI,EAApB,CAAJ,EAA6B,UAACC,QAAD,EAAc;AACjEH,MAAAA,UAAU,CAACG,QAAQ,CAACC,IAAT,GAAgBL,OAAjB,CAAV;AACD,KAFuB,CAAxB;AAGA,WAAO;AAAA,aAAME,KAAK,EAAX;AAAA,KAAP;AACD,GALQ,EAKN,EALM,CAAT;AAOA,sBACE;AAAA,4BACE,QAAC,aAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACO,KADf;AAEE,MAAA,IAAI,EAAEP,KAAK,CAACQ,IAFd;AAGE,MAAA,WAAW,EAAER,KAAK,CAACS,WAHrB;AAIE,MAAA,KAAK,EAAET,KAAK,CAACU,KAJf;AAKE,MAAA,IAAI,EAAEV,KAAK,CAACW,IALd;AAME,MAAA,EAAE,EAAEX,KAAK,CAACI;AANZ;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEH;AAApB;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAtBQF,iB;;KAAAA,iB;;AAyDT,eAAeA,iBAAf","sourcesContent":["import {\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  getDoc,\r\n  onSnapshot,\r\n} from \"@firebase/firestore\";\r\nimport moment from \"moment\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\r\nimport ReplyList from \"../../components/meetups/ReplyList\";\r\nimport db from \"../../firebase/firebase\";\r\nimport { wrapper } from \"../../store/store\";\r\nimport { getSingleUser } from \"../../store/usersSlice\";\r\nfunction MeetUpDetailsPage({ posts }) {\r\n  const [replies, setReplies] = useState([]);\r\n  useEffect(() => {\r\n    const unsub = onSnapshot(doc(db, \"posts\", posts.id), (snapshot) => {\r\n      setReplies(snapshot.data().replies);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MeetUpDetails\r\n        title={posts.title}\r\n        time={posts.time}\r\n        description={posts.description}\r\n        image={posts.image}\r\n        user={posts.user}\r\n        id={posts.id}\r\n      />\r\n      <ReplyList replies={replies} />\r\n    </div>\r\n  );\r\n}\r\nexport async function getStaticPaths() {\r\n  const docs = await getDocs(collection(db, \"posts\"));\r\n  const posts = docs.docs.map((doc) => {\r\n    return { ...doc.data(), id: doc.id };\r\n  });\r\n\r\n  return {\r\n    fallback: true,\r\n    paths: posts.map((post) => {\r\n      return { params: { postId: post.id } };\r\n    }),\r\n  };\r\n}\r\nexport const getStaticProps = wrapper.getStaticProps(\r\n  (store) => async (context) => {\r\n    const postId = context.params.postId;\r\n    const docc = await getDoc(doc(db, \"posts\", postId)).then((data) => {\r\n      return { ...data.data(), id: data.id };\r\n    });\r\n\r\n    const newDoc = { ...docc, time: moment(docc.time.toDate()).calendar() };\r\n    const dod = newDoc.replies.map((reply) => {\r\n      return { ...reply, time: moment(reply.time.toDate()).fromNow() };\r\n    });\r\n    const newDoo = { ...newDoc, replies: dod };\r\n\r\n    return {\r\n      props: {\r\n        posts: newDoo,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport default MeetUpDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}