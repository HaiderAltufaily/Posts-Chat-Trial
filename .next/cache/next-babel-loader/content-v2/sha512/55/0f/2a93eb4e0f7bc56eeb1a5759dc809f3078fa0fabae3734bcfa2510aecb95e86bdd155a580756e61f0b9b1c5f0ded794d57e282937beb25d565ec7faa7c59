{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { db } from \"../firebase/firebase\";\nexport const submitPost = createAsyncThunk(\"submitPost/posts\", async postData => {\n  return axios.post(\"/api/new-post\", postData);\n});\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async post => {\n  axios.delete(`/api/posts/${post}`);\n});\nexport const getAllPosts = createAsyncThunk(\"getAllPosts/posts\", async (_, {\n  dispatch\n}) => {\n  const q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\n  const unsub = onSnapshot(q, snaap => {\n    const post = snaap.docs.map(doc => {\n      return _objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      });\n    });\n    dispatch(getPosts(post));\n  }); // return unsub;\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    postStatus: \"\",\n    deletePostStatus: \"\",\n    realTimePosts: [],\n    unsub: \"\"\n  },\n  reducers: {\n    getPosts(state, action) {\n      state.realTimePosts = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [HYDRATE]: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), action.payload.posts);\n    },\n    [submitPost.pending]: (state, action) => {\n      state.postStatus = \"loading\";\n    },\n    [submitPost.fulfilled]: (state, action) => {\n      state.postStatus = \"success\";\n    },\n    [submitPost.rejected]: (state, action) => {\n      state.postStatus = action.error.message;\n    },\n    // [getAllPosts.fulfilled]: (state, action) => {\n    //   state.unsub = action.payload;\n    // },\n    [deletePost.pending]: (state, action) => {\n      state.deletePostStatus = \"loading\";\n    },\n    [deletePost.fulfilled]: (state, action) => {\n      state.deletePostStatus = \"success\";\n    },\n    [deletePost.rejected]: (state, action) => {\n      state.deletePostStatus = action.error.message;\n    }\n  }\n});\nexport const {\n  getPosts\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/postsSlice.js"],"names":["collection","onSnapshot","orderBy","query","createAsyncThunk","createSlice","axios","HYDRATE","db","submitPost","postData","post","deletePost","delete","getAllPosts","_","dispatch","q","unsub","snaap","docs","map","doc","data","id","getPosts","postsSlice","name","initialState","postStatus","deletePostStatus","realTimePosts","reducers","state","action","payload","extraReducers","posts","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { db } from \"../firebase/firebase\";\r\nexport const submitPost = createAsyncThunk(\r\n  \"submitPost/posts\",\r\n  async (postData) => {\r\n    return axios.post(\"/api/new-post\", postData);\r\n  }\r\n);\r\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async (post) => {\r\n  axios.delete(`/api/posts/${post}`);\r\n});\r\nexport const getAllPosts = createAsyncThunk(\r\n  \"getAllPosts/posts\",\r\n  async (_, { dispatch }) => {\r\n    const q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\r\n    const unsub = onSnapshot(q, (snaap) => {\r\n      const post = snaap.docs.map((doc) => {\r\n        return { ...doc.data(), id: doc.id };\r\n      });\r\n\r\n      dispatch(getPosts(post));\r\n    });\r\n    // return unsub;\r\n  }\r\n);\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    postStatus: \"\",\r\n    deletePostStatus: \"\",\r\n    realTimePosts: [],\r\n    unsub: \"\",\r\n  },\r\n  reducers: {\r\n    getPosts(state, action) {\r\n      state.realTimePosts = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.posts,\r\n      };\r\n    },\r\n\r\n    [submitPost.pending]: (state, action) => {\r\n      state.postStatus = \"loading\";\r\n    },\r\n    [submitPost.fulfilled]: (state, action) => {\r\n      state.postStatus = \"success\";\r\n    },\r\n\r\n    [submitPost.rejected]: (state, action) => {\r\n      state.postStatus = action.error.message;\r\n    },\r\n    // [getAllPosts.fulfilled]: (state, action) => {\r\n    //   state.unsub = action.payload;\r\n    // },\r\n\r\n    [deletePost.pending]: (state, action) => {\r\n      state.deletePostStatus = \"loading\";\r\n    },\r\n    [deletePost.fulfilled]: (state, action) => {\r\n      state.deletePostStatus = \"success\";\r\n    },\r\n\r\n    [deletePost.rejected]: (state, action) => {\r\n      state.deletePostStatus = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { getPosts } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}