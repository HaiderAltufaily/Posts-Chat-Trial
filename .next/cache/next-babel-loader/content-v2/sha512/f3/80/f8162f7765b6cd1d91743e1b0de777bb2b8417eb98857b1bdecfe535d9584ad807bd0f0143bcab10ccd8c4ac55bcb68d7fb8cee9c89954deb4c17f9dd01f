{"ast":null,"code":"import _defineProperty from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { db } from \"../firebase/firebase\";\nexport var submitPost = createAsyncThunk(\"submitPost/posts\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(postData) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", axios.post(\"/api/new-post\", postData));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var deletePost = createAsyncThunk(\"deletePost/posts\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            axios[\"delete\"](\"/api/posts/\".concat(post));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}()); // export const getAllPosts = createAsyncThunk(\n//   \"getAllPosts/posts\",\n//   async (_, { dispatch }) => {\n//     const unsub = onSnapshot(collection(db, \"posts\"), (snap) => {\n//       const u = snap.docs.map((doc) => {\n//         return { ...doc.data(), id: doc.id };\n//       });\n//       console.log(dispatch(setPosts(u)));\n//     });\n//     return unsub;\n//   }\n// );\n\nvar postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    postStatus: \"\",\n    deletePostStatus: \"\",\n    realTimePosts: [],\n    unsub: \"\"\n  },\n  reducers: {\n    getAllPosts: function getAllPosts(state, action) {\n      var q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\n      var unsub = onSnapshot(q, function (snaap) {\n        var post = snaap.docs.map(function (doc) {\n          return _objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          });\n        });\n        state.realTimePosts.push(post);\n      });\n      state.unsub = unsub;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, HYDRATE, function (state, action) {\n    return _objectSpread(_objectSpread({}, state), action.payload.some);\n  }), _defineProperty(_extraReducers, submitPost.pending, function (state, action) {\n    state.postStatus = \"loading\";\n  }), _defineProperty(_extraReducers, submitPost.fulfilled, function (state, action) {\n    state.postStatus = \"success\";\n  }), _defineProperty(_extraReducers, submitPost.rejected, function (state, action) {\n    state.postStatus = action.error.message;\n  }), _defineProperty(_extraReducers, deletePost.pending, function (state, action) {\n    state.deletePostStatus = \"loading\";\n  }), _defineProperty(_extraReducers, deletePost.fulfilled, function (state, action) {\n    state.deletePostStatus = \"success\";\n  }), _defineProperty(_extraReducers, deletePost.rejected, function (state, action) {\n    state.deletePostStatus = action.error.message;\n  }), _extraReducers)\n});\nvar getAllPosts = postsSlice.actions.getAllPosts;\nexport { getAllPosts };\nexport default postsSlice.reducer;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/store/postsSlice.js"],"names":["collection","onSnapshot","orderBy","query","createAsyncThunk","createSlice","axios","HYDRATE","db","submitPost","postData","post","deletePost","postsSlice","name","initialState","postStatus","deletePostStatus","realTimePosts","unsub","reducers","getAllPosts","state","action","q","snaap","docs","map","doc","data","id","push","extraReducers","payload","some","pending","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { HYDRATE } from \"next-redux-wrapper\";\r\nimport { db } from \"../firebase/firebase\";\r\nexport const submitPost = createAsyncThunk(\r\n  \"submitPost/posts\",\r\n  async (postData) => {\r\n    return axios.post(\"/api/new-post\", postData);\r\n  }\r\n);\r\nexport const deletePost = createAsyncThunk(\"deletePost/posts\", async (post) => {\r\n  axios.delete(`/api/posts/${post}`);\r\n});\r\n// export const getAllPosts = createAsyncThunk(\r\n//   \"getAllPosts/posts\",\r\n//   async (_, { dispatch }) => {\r\n//     const unsub = onSnapshot(collection(db, \"posts\"), (snap) => {\r\n//       const u = snap.docs.map((doc) => {\r\n//         return { ...doc.data(), id: doc.id };\r\n//       });\r\n\r\n//       console.log(dispatch(setPosts(u)));\r\n//     });\r\n//     return unsub;\r\n//   }\r\n// );\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: {\r\n    postStatus: \"\",\r\n    deletePostStatus: \"\",\r\n    realTimePosts: [],\r\n    unsub: \"\",\r\n  },\r\n  reducers: {\r\n    getAllPosts(state, action) {\r\n      const q = query(collection(db, \"posts\"), orderBy(\"time\", \"desc\"));\r\n      const unsub = onSnapshot(q, (snaap) => {\r\n        const post = snaap.docs.map((doc) => {\r\n          return { ...doc.data(), id: doc.id };\r\n        });\r\n        state.realTimePosts.push(post);\r\n      });\r\n      state.unsub = unsub;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [HYDRATE]: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.some,\r\n      };\r\n    },\r\n\r\n    [submitPost.pending]: (state, action) => {\r\n      state.postStatus = \"loading\";\r\n    },\r\n    [submitPost.fulfilled]: (state, action) => {\r\n      state.postStatus = \"success\";\r\n    },\r\n\r\n    [submitPost.rejected]: (state, action) => {\r\n      state.postStatus = action.error.message;\r\n    },\r\n\r\n    [deletePost.pending]: (state, action) => {\r\n      state.deletePostStatus = \"loading\";\r\n    },\r\n    [deletePost.fulfilled]: (state, action) => {\r\n      state.deletePostStatus = \"success\";\r\n    },\r\n\r\n    [deletePost.rejected]: (state, action) => {\r\n      state.deletePostStatus = action.error.message;\r\n    },\r\n  },\r\n});\r\nexport const { getAllPosts } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}