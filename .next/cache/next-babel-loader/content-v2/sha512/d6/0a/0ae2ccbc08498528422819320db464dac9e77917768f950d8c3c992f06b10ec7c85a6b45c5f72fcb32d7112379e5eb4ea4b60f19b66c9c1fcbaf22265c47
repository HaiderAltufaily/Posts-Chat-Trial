{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Udemy\\\\nextjs\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[postId]\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { collection, doc, getDocs, getDoc, onSnapshot } from \"@firebase/firestore\";\nimport moment from \"moment\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\nimport ReplyList from \"../../components/meetups/ReplyList\";\nimport db from \"../../firebase/firebase\";\nimport { wrapper } from \"../../store/store\";\nimport { getSingleUser } from \"../../store/usersSlice\";\n\nfunction MeetUpDetailsPage({\n  posts\n}) {\n  const {\n    0: replies,\n    1: setReplies\n  } = useState([]);\n  useEffect(() => {\n    const unsub = onSnapshot(doc(db, \"posts\", posts.id), snapshot => {\n      setReplies(snapshot.data().replies);\n    });\n    return () => unsub();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MeetUpDetails, {\n      title: posts.title,\n      time: posts.time,\n      description: posts.description,\n      image: posts.image,\n      user: posts.user,\n      id: posts.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReplyList, {\n      replies: replies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const docs = await getDocs(collection(db, \"posts\"));\n  const posts = docs.docs.map(doc => {\n    return _objectSpread(_objectSpread({}, doc.data()), {}, {\n      id: doc.id\n    });\n  });\n  return {\n    fallback: true,\n    paths: posts.map(post => {\n      return {\n        params: {\n          postId: post.id\n        }\n      };\n    })\n  };\n}\nexport const getStaticProps = wrapper.getStaticProps(store => async context => {\n  const postId = context.params.postId;\n  const docc = await getDoc(doc(db, \"posts\", postId)).then(data => {\n    return _objectSpread(_objectSpread({}, data.data()), {}, {\n      id: data.id\n    });\n  });\n\n  const newDoc = _objectSpread(_objectSpread({}, docc), {}, {\n    time: moment(docc.time.toDate()).calendar()\n  });\n\n  const dod = newDoc.replies.map(reply => {\n    return _objectSpread(_objectSpread({}, reply), {}, {\n      time: moment(reply.time.toDate()).fromNow()\n    });\n  });\n\n  const newDoo = _objectSpread(_objectSpread({}, newDoc), {}, {\n    replies: dod\n  });\n\n  return {\n    props: {\n      posts: newDoo\n    }\n  };\n});\nexport default MeetUpDetailsPage;","map":{"version":3,"sources":["D:/Udemy/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[postId]/index.js"],"names":["collection","doc","getDocs","getDoc","onSnapshot","moment","React","Fragment","useEffect","useState","MeetUpDetails","ReplyList","db","wrapper","getSingleUser","MeetUpDetailsPage","posts","replies","setReplies","unsub","id","snapshot","data","title","time","description","image","user","getStaticPaths","docs","map","fallback","paths","post","params","postId","getStaticProps","store","context","docc","then","newDoc","toDate","calendar","dod","reply","fromNow","newDoo","props"],"mappings":"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","sourcesContent":["import {\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  getDoc,\r\n  onSnapshot,\r\n} from \"@firebase/firestore\";\r\nimport moment from \"moment\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport MeetUpDetails from \"../../components/meetups/MeetUpDetails\";\r\nimport ReplyList from \"../../components/meetups/ReplyList\";\r\nimport db from \"../../firebase/firebase\";\r\nimport { wrapper } from \"../../store/store\";\r\nimport { getSingleUser } from \"../../store/usersSlice\";\r\nfunction MeetUpDetailsPage({ posts }) {\r\n  const [replies, setReplies] = useState([]);\r\n  useEffect(() => {\r\n    const unsub = onSnapshot(doc(db, \"posts\", posts.id), (snapshot) => {\r\n      setReplies(snapshot.data().replies);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MeetUpDetails\r\n        title={posts.title}\r\n        time={posts.time}\r\n        description={posts.description}\r\n        image={posts.image}\r\n        user={posts.user}\r\n        id={posts.id}\r\n      />\r\n      <ReplyList replies={replies} />\r\n    </div>\r\n  );\r\n}\r\nexport async function getStaticPaths() {\r\n  const docs = await getDocs(collection(db, \"posts\"));\r\n  const posts = docs.docs.map((doc) => {\r\n    return { ...doc.data(), id: doc.id };\r\n  });\r\n\r\n  return {\r\n    fallback: true,\r\n    paths: posts.map((post) => {\r\n      return { params: { postId: post.id } };\r\n    }),\r\n  };\r\n}\r\nexport const getStaticProps = wrapper.getStaticProps(\r\n  (store) => async (context) => {\r\n    const postId = context.params.postId;\r\n    const docc = await getDoc(doc(db, \"posts\", postId)).then((data) => {\r\n      return { ...data.data(), id: data.id };\r\n    });\r\n\r\n    const newDoc = { ...docc, time: moment(docc.time.toDate()).calendar() };\r\n    const dod = newDoc.replies.map((reply) => {\r\n      return { ...reply, time: moment(reply.time.toDate()).fromNow() };\r\n    });\r\n    const newDoo = { ...newDoc, replies: dod };\r\n\r\n    return {\r\n      props: {\r\n        posts: newDoo,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport default MeetUpDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}